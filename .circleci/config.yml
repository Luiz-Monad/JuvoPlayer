version: 2.0

jobs:
  build_and_run_unit_tests:
    working_directory: /build
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1
        auth:
          username: ${DOCKERHUB_USER}
          password: ${DOCKERHUB_PASSWORD}
    steps:
      - checkout
      - run:
          name: Setup certs
          command: >
            echo ${DISTRIBUTOR_CERT} | base64 -d - > distributor.p12 &&
            echo ${AUTHOR_CERT} | base64 -d - > author.p12
      - run:
          name: Setup proxy
          command:
            curl -sL https://art.sec.samsung.net/artifactory/tools/CircleCI/scripts/set_proxy_setting.sh | sh
      - run:
          name: Install tools
          command: apt update && DEBIAN_FRONTEND="noninteractive" apt install -y --no-install-recommends xsltproc rename
      - run:
          name: Apply GitVersionTask workaround # See https://github.com/GitTools/GitVersion/issues/2301
          command: if [ "${CIRCLE_TAG}" != "" ]; then git checkout -b release; fi
      - run:
          name: Build solution
          command: >
            dotnet build /nodeReuse:false -c Release
            /p:"AuthorPath=/build/author.p12;AuthorPass=${AUTHOR_PASS}"
            /p:"DistributorPath=/build/distributor.p12;DistributorPass=${DISTRIBUTOR_PASS}"
      - run:
          name: Run unit tests
          command: dotnet test /nodeReuse:false JuvoPlayer.Tests/JuvoPlayer.Tests.csproj --logger:trx -f netcoreapp3.1 --verbosity normal
      - run:
          name: Convert MSTest report to JUnit
          command: >
            mkdir -p TestResults &&
            xsltproc -o TestResults/output.xml scripts/mstest-junit.xlst JuvoPlayer.Tests/TestResults/*
          when: always
      - store_test_results:
          path: TestResults/
          when: always
      - run:
          name: Rename TPKs
          command: >
            rename "s/VERSION/`cat Version.txt`/" JuvoPlayer.TizenTests/bin/Release/tizen40/*.tpk
      - run:
          name: Copy artifacts to tmp directory
          command: >
            mkdir /tmp/artifacts &&
            cp JuvoPlayer.TizenTests/bin/Release/tizen40/*.tpk /tmp/artifacts/ &&
            cp JuvoPlayer/bin/Release/*.nupkg /tmp/artifacts/
      - store_artifacts:
          path: /tmp/artifacts
          destination: tpks
      - persist_to_workspace:
          root: .
          paths:
            - ./JuvoPlayer.TizenTests/bin/Release/*/*.tpk
            - ./JuvoPlayer/bin/Release/*.nupkg
            - ./scripts/nunit3-junit.xlst
            - ./Version.txt
            - ./atr_tests/*
  make_github_release: &make_github_release
    working_directory: /home/circleci
    docker:
      - image: circleci/golang:1.15
        auth:
          username: ${DOCKERHUB_USER}
          password: ${DOCKERHUB_PASSWORD}
    steps:
      - attach_workspace:
          at: /home/circleci
      - run:
          name: Setup proxy
          command:
            curl -sL https://art.sec.samsung.net/artifactory/tools/CircleCI/scripts/set_proxy_setting.sh | sh
      - run:
          name: Setup environment variables
          command: >
            NUGET_PATH=`find -name *.nupkg` &&
            TPK_PATH=`find -name *.tpk` &&
            echo "export NUGET_PATH=${NUGET_PATH}" >> $BASH_ENV &&
            echo "export TPK_PATH=${TPK_PATH}" >> $BASH_ENV
      - run:
          name: Collect artifacts
          command: >
            mkdir -p artifacts &&
            cp ${NUGET_PATH} artifacts &&
            cp ${TPK_PATH} artifacts
      - run:
          name: Publish Release on GitHub
          command: >
            go get github.com/tcnksm/ghr &&
            VERSION=${CIRCLE_TAG:-$(cat Version.txt | tr -d '[:space:]')} &&
            ghr -t ${GITHUB_TOKEN} -u ${PROJECT_USERNAME} -r ${PROJECT_REPONAME} -c ${CIRCLE_SHA1} -delete ${VERSION} ./artifacts/
  make_public_github_release:
    <<: *make_github_release
  make_enterprise_github_release:
    <<: *make_github_release
  push_code_to_public_github:
    working_directory: /home/circleci/juvoplayer
    docker:
      - image: circleci/buildpack-deps:18.04-curl
        auth:
          username: ${DOCKERHUB_USER}
          password: ${DOCKERHUB_PASSWORD}
    steps:
      - add_ssh_keys:
          fingerprints:
            - "95:ab:50:77:3d:2e:5f:e7:77:6b:3f:be:a8:ec:7f:8c"
      - run:
          name: Setup proxy
          command:
            curl -sL https://art.sec.samsung.net/artifactory/tools/CircleCI/scripts/set_proxy_setting.sh | sh
      - checkout
      - run:
          name: Push code
          command: >
            echo $'Host ssh.github.com\n\tStrictHostKeyChecking no' > ~/.ssh/config &&
            git remote add github ssh://git@ssh.github.com:443/SamsungDForum/JuvoPlayer.git &&
            git fetch github &&
            git checkout -b github-master-v2 github/master-v2 &&
            git merge origin/master-v2 &&
            git push github github-master-v2:master-v2 &&
            git push github ${CIRCLE_TAG}
  make_release_notes_on_public_github:
    working_directory: /home/circleci
    docker:
      - image: circleci/buildpack-deps:18.04-curl
        auth:
          username: ${DOCKERHUB_USER}
          password: ${DOCKERHUB_PASSWORD}
    steps:
      - add_ssh_keys:
          fingerprints:
            - "84:87:bf:67:e0:45:71:04:e7:97:2d:6d:fd:ca:01:67"
      - run:
          name: Setup proxy
          command:
            curl -sL https://art.sec.samsung.net/artifactory/tools/CircleCI/scripts/set_proxy_setting.sh | sh
      - run:
          name: Make release notes
          command: >
            ssh -o StrictHostKeyChecking=no ${ATR_RUNNER_USER}@${ATR_RUNNER_IP}
            gren release --token=${GITHUB_TOKEN} --username=${PROJECT_USERNAME} --repo=${PROJECT_REPONAME}
            --tags=${CIRCLE_TAG} --data-source commits --override
  push_to_nuget_org:
    working_directory: /build
    docker:
      - image: mcr.microsoft.com/dotnet/core/sdk:3.1
        auth:
          username: ${DOCKERHUB_USER}
          password: ${DOCKERHUB_PASSWORD}
    steps:
      - attach_workspace:
          at: /build
      - run:
          name: Setup environment variables
          command: >
            NUGET_PATH=`find -name *.nupkg` &&
            echo "export NUGET_PATH=${NUGET_PATH}" >> $BASH_ENV
      - run:
          name: Setup proxy
          command:
            curl -sL https://art.sec.samsung.net/artifactory/tools/CircleCI/scripts/set_proxy_setting.sh | sh
      - run:
          name: Nuget push
          command:
            dotnet nuget push -s https://www.nuget.org/api/v2/package -k ${NUGET_ORG_TOKEN} ${NUGET_PATH}
  push_to_local_nuget_source:
    working_directory: /home/circleci
    docker:
      - image: circleci/buildpack-deps:18.04-curl
        auth:
          username: ${DOCKERHUB_USER}
          password: ${DOCKERHUB_PASSWORD}
    steps:
      - attach_workspace:
          at: /home/circleci
      - add_ssh_keys:
          fingerprints:
            - "84:87:bf:67:e0:45:71:04:e7:97:2d:6d:fd:ca:01:67"
      - run:
          name: Setup environment variables
          command: >
            NUGET_PATH=`find -name *.nupkg` &&
            NUGET_NAME=`basename ${NUGET_PATH}` &&
            echo "export NUGET_PATH=${NUGET_PATH}" >> $BASH_ENV &&
            echo "export NUGET_NAME=${NUGET_NAME}" >> $BASH_ENV
      - run:
          name: Setup proxy
          command:
            curl -sL https://art.sec.samsung.net/artifactory/tools/CircleCI/scripts/set_proxy_setting.sh | sh
      - run:
          name: Push to local nuget source
          command: >
            scp -o StrictHostKeyChecking=no ${NUGET_PATH} ${ATR_RUNNER_USER}@${ATR_RUNNER_IP}:/tmp/ &&
            ssh -o StrictHostKeyChecking=no ${ATR_RUNNER_USER}@${ATR_RUNNER_IP} dotnet nuget push -s ${LOCAL_NUGET_SOURCE} /tmp/${NUGET_NAME}
  run_integration_tests:
    working_directory: /home/circleci
    docker:
      - image: circleci/buildpack-deps:18.04-curl
        auth:
          username: ${DOCKERHUB_USER}
          password: ${DOCKERHUB_PASSWORD}
    steps:
      - attach_workspace:
          at: /home/circleci
      - add_ssh_keys:
          fingerprints:
            - "84:87:bf:67:e0:45:71:04:e7:97:2d:6d:fd:ca:01:67"
      - run:
          name: Setup proxy
          command:
            curl -sL https://art.sec.samsung.net/artifactory/tools/CircleCI/scripts/set_proxy_setting.sh | sh
      - run:
          name: Setup environment variables
          command: >
            TPK_PATH=`find -name *.tpk` &&
            TPK_NAME=`basename ${TPK_PATH}` &&
            echo "export TPK_PATH=${TPK_PATH}" >> $BASH_ENV &&
            echo "export TPK_NAME=${TPK_NAME}" >> $BASH_ENV
      - run:
          name: Install dependencies
          command: >
            sudo apt update && DEBIAN_FRONTEND="noninteractive" sudo apt install -y --no-install-recommends xsltproc openssh-client
      - run:
          name: Run ATR tests
          no_output_timeout: ${NO_OUTPUT_TIMEOUT}
          command: >
            scp -o StrictHostKeyChecking=no ${TPK_PATH} ${ATR_RUNNER_USER}@${ATR_RUNNER_IP}:/tmp/ &&
            scp -r -o StrictHostKeyChecking=no /home/circleci/atr_tests ${ATR_RUNNER_USER}@${ATR_RUNNER_IP}:/tmp/ &&
            ssh -t -o StrictHostKeyChecking=no ${ATR_RUNNER_USER}@${ATR_RUNNER_IP} "cd /home/${ATR_RUNNER_USER}/weed/atr &&
            rm -rf results &&
            rm -rf atr_tests &&
            mkdir atr_tests &&
            cp -rf /tmp/atr_tests/* atr_tests &&
            cp /tmp/${TPK_NAME} atr_tests &&
            python3 atr_in_docker.py
            --task-scenario JuvoPlayerTest
            --tty ${TTY_DEV}
            --irda-device ${IRDA_DEV}
            --log-level debug
            --dlog-tags JuvoPlayer UT DOTNET_LAUNCHER
            --url ${IMAGE_URL}
            --tizen ${TIZEN_VERSION}
            --custom-docker-arguments=\"-v /home/${ATR_RUNNER_USER}/weed/atr/atr_tests:/root/atr/src/tests/juvo_player_test:ro\"
            --board-version ${BOARD_VERSION}"
      - run:
          name: Download test results
          command: scp -o StrictHostKeyChecking=no -r ${ATR_RUNNER_USER}@${ATR_RUNNER_IP}:/home/${ATR_RUNNER_USER}/weed/atr/results/* results/
          when: always
      - store_artifacts:
          path: results
          destination: results
          when: always
      - run:
          name: Convert NUnit report to JUnit
          command: >
            mkdir -p TestResults &&
            xsltproc -o TestResults/output.xml scripts/nunit3-junit.xlst
            results/ATR_Task/JuvoPlayerTest/JuvoPlayerTest/JuvoPlayer.TizenTests.xml
          when: always
      - store_test_results:
          path: TestResults/
          when: always

workflows:
  version: 2
  commit:
    jobs:
      - build_and_run_unit_tests
      - push_to_local_nuget_source:
          requires:
            - build_and_run_unit_tests
      - make_github_release:
          context: enterprise_github
          requires:
            - build_and_run_unit_tests
          filters:
            branches:
              only:
                - master-v2
  release:
    jobs:
      - build_and_run_unit_tests:
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only: /^[0-9]+\.[0-9]+(\.[0-9]+)?(-alpha|-beta)?$/
      - make_enterprise_github_release:
          context: enterprise_github
          requires:
            - build_and_run_unit_tests
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only: /^[0-9]+\.[0-9]+(\.[0-9]+)?(-alpha|-beta)?/
      - push_code_to_public_github:
          requires:
              - build_and_run_unit_tests
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only: /^[0-9]+\.[0-9]+(\.[0-9]+)?(-alpha|-beta)?/
      - make_public_github_release:
          context: public_github
          requires:
            - push_code_to_public_github
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only: /^[0-9]+\.[0-9]+(\.[0-9]+)?(-alpha|-beta)?/
      - make_release_notes_on_public_github:
          context: public_github
          requires:
            - make_public_github_release
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only: /^[0-9]+\.[0-9]+(\.[0-9]+)?(-alpha|-beta)?/
      - push_to_nuget_org:
          requires:
            - make_release_notes_on_public_github
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only: /^[0-9]+\.[0-9]+(\.[0-9]+)?(-alpha|-beta)?$/
  nightly:
    triggers:
      - schedule:
          cron: "0 19 * * *"
          filters:
            branches:
              only:
                - master-v2
    jobs:
      - build_and_run_unit_tests
      - run_integration_tests:
          requires:
            - build_and_run_unit_tests
